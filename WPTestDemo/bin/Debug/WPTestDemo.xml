<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WPTestDemo</name>
    </assembly>
    <members>
        <member name="T:WPTestDemo.BaseTest">
            <summary>
            Master class for the TestNG suite. Does necessary setup work for all classes.
            </summary>
        </member>
        <member name="F:WPTestDemo.BaseTest.getPostId">
            <summary>
            Default post ID to use for tests
            </summary>
        </member>
        <member name="F:WPTestDemo.BaseTest.getPostTitle">
            <summary>
            Default post title to use for tests
            </summary>
        </member>
        <member name="F:WPTestDemo.BaseTest.getTagId">
            <summary>
            Default tag ID to use for tests
            </summary>
        </member>
        <member name="F:WPTestDemo.BaseTest.getTagName">
            <summary>
            Default tag name to use for tests
            </summary>
        </member>
        <member name="F:WPTestDemo.BaseTest.getCategoryId">
            <summary>
            Default category ID to use for tests
            </summary>
        </member>
        <member name="F:WPTestDemo.BaseTest.getCategoryName">
            <summary>
            Default category name to use for tests
            </summary>
        </member>
        <member name="F:WPTestDemo.BaseTest.getCommentId">
            <summary>
            Default comment ID to use for tests
            </summary>
        </member>
        <member name="F:WPTestDemo.BaseTest.getCommentContent">
            <summary>
            Default comment content to use for tests
            </summary>
        </member>
        <member name="F:WPTestDemo.BaseTest.getPageId">
            <summary>
            Default page ID to use for tests
            </summary>
        </member>
        <member name="F:WPTestDemo.BaseTest.getPageTitle">
            <summary>
            Default page title to use for tests
            </summary>
        </member>
        <member name="F:WPTestDemo.BaseTest.getTaxonomyTag">
            <summary>
            Default taxonomy tag to use for tests
            </summary>
        </member>
        <member name="F:WPTestDemo.BaseTest.getTaxonomyName">
            <summary>
            Default taxonomy name to use for tests
            </summary>
        </member>
        <member name="F:WPTestDemo.BaseTest.getMediaIdWindows">
            <summary>
            Default media ID for Windows to use for tests
            </summary>
        </member>
        <member name="F:WPTestDemo.BaseTest.getMediaTitle">
            <summary>
            Default media title to use for tests
            </summary>
        </member>
        <member name="F:WPTestDemo.BaseTest.getUserId">
            <summary>
            Default user ID to use for tests
            </summary>
        </member>
        <member name="F:WPTestDemo.BaseTest.getUserName">
            <summary>
            Default user name to use for tests
            </summary>
        </member>
        <member name="F:WPTestDemo.BaseTest.getPostTypeTag">
            <summary>
            Default post type tag to use for tests
            </summary>
        </member>
        <member name="F:WPTestDemo.BaseTest.getPostTypeName">
            <summary>
            Default post type name to use for tests
            </summary>
        </member>
        <member name="F:WPTestDemo.BaseTest.getPostStatusTag">
            <summary>
            Default post status tag to use for tests
            </summary>
        </member>
        <member name="F:WPTestDemo.BaseTest.getPostStatusName">
            <summary>
            Default post status name to use for tests
            </summary>
        </member>
        <member name="F:WPTestDemo.BaseTest.getNonExistentId">
            <summary>
            Default string to use as a non-existent ID in tests
            </summary>
        </member>
        <member name="F:WPTestDemo.BaseTest.getNonExistentMessage">
            <summary>
            Default string to use as the expected message when an item doesn't
            exist in the tests
            </summary>
        </member>
        <member name="F:WPTestDemo.BaseTest.getNonExistentCode">
            <summary>
            Default string to use as the error code when an item doesn't exist
            in the tests
            </summary>
        </member>
        <member name="F:WPTestDemo.BaseTest.getNonExistentTag">
            <summary>
            Default string to use for a non-existent tag in tests
            </summary>
        </member>
        <member name="F:WPTestDemo.BaseTest.getInvalidId">
            <summary>
            Default string to use for an invalid ID in the tests
            </summary>
        </member>
        <member name="F:WPTestDemo.BaseTest.getInvalidMessage">
            <summary>
            Default response message to expect when an item is invalid in the tests
            </summary>
        </member>
        <member name="F:WPTestDemo.BaseTest.getInvalidCode">
            <summary>
            Default response code to expect when an item is invalid in the tests
            </summary>
        </member>
        <member name="F:WPTestDemo.BaseTest.getInvalidTag">
            <summary>
            Default string to use for an invalid tag in the tests
            </summary>
        </member>
        <member name="F:WPTestDemo.BaseTest.getTermNonExistentMessage">
            <summary>
            Default message to expect when a particular test term does not exist
            </summary>
        </member>
        <member name="F:WPTestDemo.BaseTest.getTermNonExistentCode">
            <summary>
            Default error code to expect when a particular test term does not exist
            </summary>
        </member>
        <member name="F:WPTestDemo.BaseTest.getCommentNonExistentMessage">
            <summary>
            Default error message to expect when a comment doesn't exist
            </summary>
        </member>
        <member name="F:WPTestDemo.BaseTest.getCommentNonExistentCode">
            <summary>
            Default error code to expect when a comment doesn't exist
            </summary>
        </member>
        <member name="F:WPTestDemo.BaseTest.getTaxonomyNonExistentMessage">
            <summary>
            Default error message to expect when a taxonomy doesn't exist
            </summary>
        </member>
        <member name="F:WPTestDemo.BaseTest.getTaxonomyNonExistentCode">
            <summary>
            Default error code to expect when a taxonomy doesn't exist
            </summary>
        </member>
        <member name="F:WPTestDemo.BaseTest.getUserNonExistentMessage">
            <summary>
            Default error message to expect when a user doesn't exist
            </summary>
        </member>
        <member name="F:WPTestDemo.BaseTest.getUserNonExistentCode">
            <summary>
            Default error code to expect when a user doesn't exist
            </summary>
        </member>
        <member name="F:WPTestDemo.BaseTest.getPostTypeNonExistentMessage">
            <summary>
            Default error message to expect when a post type doesn't exist
            </summary>
        </member>
        <member name="F:WPTestDemo.BaseTest.getPostTypeNonExistentCode">
            <summary>
            Default error code to expect when a post type doesn't exist
            </summary>
        </member>
        <member name="F:WPTestDemo.BaseTest.getPostStatusNonExistentMessage">
            <summary>
            Default error message to expect when a post status doesn't exist
            </summary>
        </member>
        <member name="F:WPTestDemo.BaseTest.getPostStatusNonExistentCode">
            <summary>
            Default error code to expect when a post status doesn't exist
            </summary>
        </member>
        <member name="F:WPTestDemo.BaseTest.wpTC">
            <summary>
            For generating the instance of the WP Test Client
            </summary>
        </member>
        <member name="F:WPTestDemo.BaseTest.wpLib">
            <summary>
            For generating an instance of WPTestLib
            </summary>
        </member>
        <member name="M:WPTestDemo.BaseTest.SetUp">
            <summary>
            Setup method for all test classes
            </summary>
        </member>
        <member name="T:WPTestDemo.TestMedia">
            <summary>
            Test cases related to media on the Wordpress test site.
            </summary>
        </member>
        <member name="M:WPTestDemo.TestMedia.TestGetMediaReturnsMedia">
            <summary>
            Verify that the GetMedia endpoint actually returns data. There should be a JArray of length > 0.
            </summary>
        </member>
        <member name="M:WPTestDemo.TestMedia.TestGetMediaById">
            <summary>
            Verify that you can get a media item by a specific ID off the GetMedia endpoint.
            </summary>
        </member>
        <member name="T:WPTestDemo.TestPages">
            <summary>
            Test cases related to pages on the Wordpress test site.
            </summary>
        </member>
        <member name="M:WPTestDemo.TestPages.TestGetPagesReturnsPages">
            <summary>
            Verify that the GetPages endpoint actually returns data. There should be a JArray of length > 0.
            </summary>
        </member>
        <member name="M:WPTestDemo.TestPages.TestGetPageById">
            <summary>
            Verify that you can get a page by a specific ID off the GetPages endpoint.
            </summary>
        </member>
        <member name="M:WPTestDemo.TestPages.TestGetPageIdThatDoesNotExist">
            <summary>
            Verify that the Get Page by Id endpoint exhibits expected error
            behavior if you throw it a page ID that doesn't actually exist.
            </summary>
        </member>
        <member name="M:WPTestDemo.TestPages.TestGetPageIdBadId">
            <summary>
            Verify that the Get Page by Id endpoint throws expected error behavior if given invalid data for its page ID.
            </summary>
        </member>
        <member name="M:WPTestDemo.TestPages.TestGetPageIdMaxInt">
            <summary>
            Verify that the Get Page by Id endpoint throws error behavior when using int.MaxValue as a page ID.
            </summary>
        </member>
        <member name="M:WPTestDemo.TestPages.TestGetPageIdMinInt">
            <summary>
            Verify that the Get Page by Id endpoint throws error behavior when using int.MinValue as a page ID.
            </summary>
        </member>
        <member name="T:WPTestDemo.TestPostStatuses">
            <summary>
            Test cases related to post types on the Wordpress test site.
            </summary>
        </member>
        <member name="M:WPTestDemo.TestPostStatuses.TestGetPostStatusesReturnsPostStatuses">
            <summary>
            Verify that the GetPostStatuses endpoint actually returns data. There
            should be a JObject of length == 1.
            </summary>
        </member>
        <member name="M:WPTestDemo.TestPostStatuses.TestGetPostStatusByTag">
            <summary>
            Verify that you can get a post status by a specific tag off the GetPostStatuses endpoint.
            </summary>
        </member>
        <member name="T:WPTestDemo.TestPostTypes">
            <summary>
            Test cases related to post types on the Wordpress test site.
            </summary>
        </member>
        <member name="M:WPTestDemo.TestPostTypes.TestGetPostTypesReturnsPostTypes">
            <summary>
            Verify that the GetPostTypes endpoint actually returns data. There
            should be a JObject of length == 4.
            </summary>
        </member>
        <member name="M:WPTestDemo.TestPostTypes.TestGetPostTypeByTag">
            <summary>
            Verify that you can get a post type by a specific tag off the GetPostTypes endpoint.
            </summary>
        </member>
        <member name="T:WPTestDemo.TestTags">
            <summary>
            Test cases related to tags on the Wordpress test site.
            </summary>
        </member>
        <member name="M:WPTestDemo.TestTags.TestGetTagsReturnsTags">
            <summary>
            Verify that the GetTags endpoint actually returns data. There should be a JArray of length > 0.
            </summary>
        </member>
        <member name="M:WPTestDemo.TestTags.TestGetTagById">
            <summary>
            Verify that you can get a tag by a specific ID off the GetTags endpoint.
            </summary>
        </member>
        <member name="T:WPTestDemo.TestCategories">
            <summary>
            Test cases related to categories on the Wordpress test site.
            </summary>
        </member>
        <member name="M:WPTestDemo.TestCategories.TestGetCategoriesReturnsCategories">
            <summary>
            Verify that the GetCategories endpoint actually returns data. There should be a JArray of length > 0.
            </summary>
        </member>
        <member name="M:WPTestDemo.TestCategories.TestGetCategoryById">
            <summary>
            Verify that you can get a category by a specific ID off the GetCategories endpoint.
            </summary>
        </member>
        <member name="T:WPTestDemo.TestComments">
            <summary>
            Test cases related to comments on the Wordpress test site.
            </summary>
        </member>
        <member name="M:WPTestDemo.TestComments.TestGetCommentsReturnsComments">
            <summary>
            Verify that the GetComments endpoint actually returns data. There should be a JArray of length > 0.
            </summary>
        </member>
        <member name="M:WPTestDemo.TestComments.TestGetCommentById">
            <summary>
            Verify that you can get a comment by a specific ID off the GetComments endpoint.
            </summary>
        </member>
        <member name="T:WPTestDemo.TestPosts">
            <summary>
            Test cases related to posts on the Wordpress test site.
            </summary>
        </member>
        <member name="M:WPTestDemo.TestPosts.TestGetPostsReturnsPosts">
            <summary>
            Verify that the GetPosts endpoint actually returns data. There should be a JArray of length > 0.
            </summary>
        </member>
        <member name="M:WPTestDemo.TestPosts.TestGetPostById">
            <summary>
            Verify that you can get a post by a specific ID off the GetPosts endpoint.
            </summary>
        </member>
        <member name="M:WPTestDemo.TestPosts.TestGetPostIdThatDoesNotExist">
            <summary>
            Verify that the Get Post by Id endpoint exhibits expected error
            behavior if you throw it a post ID that doesn't actually exist.
            </summary>
        </member>
        <member name="M:WPTestDemo.TestPosts.TestGetPostIdBadId">
            <summary>
            Verify that the Get Post by Id endpoint throws expected error behavior if given invalid data for its post ID.
            </summary>
        </member>
        <member name="M:WPTestDemo.TestPosts.TestGetPostIdMaxInt">
            <summary>
            Verify that the Get Post by Id endpoint throws error behavior when using int.MaxValue as a post ID.
            </summary>
        </member>
        <member name="M:WPTestDemo.TestPosts.TestGetPostIdMinInt">
            <summary>
            Verify that the Get Post by Id endpoint throws error behavior when using int.MinValue as a post ID.
            </summary>
        </member>
        <member name="T:WPTestDemo.TestTaxonomies">
            <summary>
            Test cases related to taxonomies on the Wordpress test site.
            </summary>
        </member>
        <member name="M:WPTestDemo.TestTaxonomies.TestGetTaxonomiesReturnsTaxonomies">
            <summary>
            Verify that the GetTaxonomies endpoint actually returns data. There
            should be a JObject of length == 2.
            </summary>
        </member>
        <member name="M:WPTestDemo.TestTaxonomies.TestGetTaxonomyByTag">
            <summary>
            Verify that you can get a taxonomy by a specific tag off the GetTaxonomies endpoint.
            </summary>
        </member>
        <member name="T:WPTestDemo.TestUsers">
            <summary>
            Test cases related to users on the Wordpress test site.
            </summary>
        </member>
        <member name="M:WPTestDemo.TestUsers.TestGetUsersReturnsUsers">
            <summary>
            Verify that the GetUsesrs endpoint actually returns data. There should be a JArray of length > 0.
            </summary>
        </member>
        <member name="M:WPTestDemo.TestUsers.TestGetUserById">
            <summary>
            Verify that you can get a user by a specific ID off the GetUsers endpoint.
            </summary>
        </member>
        <member name="T:WPTestDemo.WPTestClient">
            <summary>
            Helper client the tests use to interact with the WordPress API endpoints.
            Uses RestSharp to do the actual GET, POST, etc. calls.
            </summary>
        </member>
        <member name="F:WPTestDemo.WPTestClient.Client">
            <summary>
            Client to do calls to the Wordpress API endpoints
            </summary>
        </member>
        <member name="M:WPTestDemo.WPTestClient.#ctor(System.String,System.String)">
            <summary>
            Constructor for the class.
            </summary>
            <param name="incomingHost">
            String containing the host address for the test site
            </param>
            <param name="incomingProtocol">
            String containing the protocol to use for URIs
            </param>
        </member>
        <member name="M:WPTestDemo.WPTestClient.GetPosts">
            <summary>
            Gets a JArray of posts on the test WordPress site.
            </summary>
        </member>
        <member name="M:WPTestDemo.WPTestClient.GetPostById(System.String)">
            <summary>
            Get a specific post on the test WordPress site by post ID.
            </summary>
            <param name="postId">String containing the post ID to work with</param>
            <returns>JObject from the Get call</returns>
        </member>
        <member name="M:WPTestDemo.WPTestClient.GetCategories">
            <summary>
            Gets a JArray of categories on the test WordPress site.
            </summary>
        </member>
        <member name="M:WPTestDemo.WPTestClient.GetCategoryById(System.String)">
            <summary>
            Get a specific category on the test WordPress site by category ID.
            </summary>
            <param name="categoryId">String containing the category ID to work with</param>
            <returns>JObject from the Get call</returns>
        </member>
        <member name="M:WPTestDemo.WPTestClient.GetTags">
            <summary>
            Get a JArray of tags on the test WordPress site.
            </summary>
        </member>
        <member name="M:WPTestDemo.WPTestClient.GetTagById(System.String)">
            <summary>
            Get a specific tag on the test WordPress site by tag ID.
            </summary>
            <param name="tagId">String containing the tag ID to work with</param>
            <returns>JObject from the Get call</returns>
        </member>
        <member name="M:WPTestDemo.WPTestClient.GetPages">
            <summary>
            Get a JArray of pages on the test WordPress site.
            </summary>
        </member>
        <member name="M:WPTestDemo.WPTestClient.GetPageById(System.String)">
            <summary>
            Get a specific page on the test WordPress site by page ID.
            </summary>
            <param name="pageId">String containing the ID of the page to work with</param>
            <returns>JObject containing the page data</returns>
        </member>
        <member name="M:WPTestDemo.WPTestClient.GetComments">
            <summary>
            Get a JArray of comments on the test WordPress site.
            </summary>
        </member>
        <member name="M:WPTestDemo.WPTestClient.GetCommentById(System.String)">
            <summary>
            Get a specific comment on the test WordPress site by comment ID.
            </summary>
            <param name="commentId">String containing the comment ID to work with</param>
            <returns>JObject containing the comment data</returns>
        </member>
        <member name="M:WPTestDemo.WPTestClient.GetTaxonomies">
            <summary>
            Get a JObject of taxonomies on the test WordPress site.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WPTestDemo.WPTestClient.GetTaxonomyByTag(System.String)">
            <summary>
            Get a specific taxonomy on the test WordPress site by its tag
            </summary>
            <param name="taxonomyTag">String containing the tag for the taxonomy to work with</param>
            <returns>JObject containing the taxonomy data</returns>
        </member>
        <member name="M:WPTestDemo.WPTestClient.GetMedia">
            <summary>
            Get a JSONArray of media on the test WordPress site.
            </summary>
        </member>
        <member name="M:WPTestDemo.WPTestClient.GetMediaById(System.String)">
            <summary>
            Get a specific media item on the test WordPress site by its ID.
            </summary>
            <param name="mediaId">String containing the ID of the media item to work with</param>
            <returns>JObject containing the media data</returns>
        </member>
        <member name="M:WPTestDemo.WPTestClient.GetUsers">
            <summary>
            Get a JArray of users on the test WordPress site.
            </summary>
        </member>
        <member name="M:WPTestDemo.WPTestClient.GetUserById(System.String)">
            <summary>
            Get a specific user on the test WordPress site by their ID.
            </summary>
            <param name="userId">String containing the ID of the user to work with</param>
            <returns>JObject containing the user data</returns>
        </member>
        <member name="M:WPTestDemo.WPTestClient.GetPostTypes">
            <summary>
            Get a JObject of post types on the test WordPress site.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WPTestDemo.WPTestClient.GetPostTypeByTag(System.String)">
            <summary>
            Get a specific post type on the test WordPress site by its tag.
            </summary>
            <param name="postTypeTag">String containing the tag for the post type to work with</param>
            <returns>JObject containing the post type data</returns>
        </member>
        <member name="M:WPTestDemo.WPTestClient.GetPostStatuses">
            <summary>
            Get a JObject of post statuses on the test WordPress site.
            </summary>
        </member>
        <member name="M:WPTestDemo.WPTestClient.GetPostStatusByTag(System.String)">
            <summary>
            Get a specific post status on the test WordPress site by its tag.
            </summary>
            <param name="postStatusTag">String containing the tag for the post status to work with</param>
            <returns>JObject containing the post status data</returns>
        </member>
        <member name="T:WPTestDemo.WPTestLib">
            <summary>
            This class is a helper library with methods used by the test classes.
            </summary>
        </member>
        <member name="M:WPTestDemo.WPTestLib.VerifyResponseItemDoesNotExist(Newtonsoft.Json.Linq.JObject,System.String,System.String)">
            <summary>
            Helper method to take a JSON response object, expected error code,
            and expected error message, and make sure the response contains the
            appropriate data to reflect that the tested-for item does not exist.
            </summary>
            <param name="response">JObject response to test</param>
            <param name="errorCode">Expected error code</param>
            <param name="errorMessage">Expected error message</param>
        </member>
        <member name="M:WPTestDemo.WPTestLib.VerifyResponseItemIsInvalid(Newtonsoft.Json.Linq.JObject,System.String,System.String)">
            <summary>
            Helper method to take a JSONObject response, an errorCode String,
            and an errorMessage String, and verify that the response contains
            appropriate data to reflect that the tested-for item is invalid.
            </summary>
            <param name="response">JObject response data to test</param>
            <param name="errorCode">String containing the expected error code</param>
            <param name="errorMessage">String containing the expected error message</param>
        </member>
    </members>
</doc>
